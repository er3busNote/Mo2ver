name: CI/CD
on:
  push:
    branches:
      - main  # main 브랜치 이름
#permissions:
#  contents: write
#  id-token: write
#  security-events: write
jobs:
  front_build:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # 2. Node.js 설정 (front 빌드)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # 사용하려는 Node.js 버전 (dependency issue..!)
          
      # 3. Frontend 빌드 (yarn)
      - name: Install dependencies and Build frontend with Yarn
        working-directory: front
        run: |
          ls -al
          yarn install
          yarn build
          ls -al
      
      # 4. 빌드 결과물 아티팩트로 업로드
      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: front/dist  # frontend 빌드 파일 경로

  back_build:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      # 2 Gradle 설정 (back 빌드)
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '7.6'
          dependency-graph: generate-and-submit
          
      # 3 Gradle 캐싱 (빌드 속도 향상)
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      # 4. Backend 빌드 (gradle)
      - name: Build backend with Gradle
        working-directory: back
        run: |
          ls -al
          ./gradlew build

      # 5. 빌드 결과물 아티팩트로 업로드
      - name: Upload backend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: back/build  # backend 빌드 파일 경로
          
  deploy:
    runs-on: ubuntu-latest
    needs: [front_build, back_build]  # front_build와 back_build가 완료된 후 실행

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 아티팩트 다운로드
      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist

      - name: Download backend build artifact
        uses: actions/download-artifact@v4
        with:
          name: build

      # 3. SSH를 통해 서버로 파일 전송
      - name: Deploy to Oracle Cloud
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.OCI_SERVER }}
          username: ${{ secrets.OCI_USER }}
          key: ${{ secrets.OCI_FINGERPRINT }}
          port: ${{ secrets.OCI_PORT }}
          source: |
            ./dist     # frontend 빌드 아티팩트 경로
            ./build    # backend 빌드 아티팩트 경로
          target: "/home/ubuntu"  # 서버의 대상 경로
          script: |
            ls -al build/
            # echo "sudo cp /etc/letsencrypt/live/api.mo2ver.p-e.kr/* /home/ubuntu/build/resources/main" >> start.sh
            # echo "sudo cp /etc/letsencrypt/live/api.mo2ver.p-e.kr/* /home/ubuntu" >> start.sh
            echo "sudo cp /etc/letsencrypt/live/mo2ver.duckdns.org/* /home/ubuntu" >> start.sh
            echo "sudo pkill -f java" >> start.sh
            echo "sudo java -jar -DPORT=${{ secrets.PORT }} -DKEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }} -DMYSQL_USER_NAME=${{ secrets.MYSQL_USER_NAME }} -DMYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} -DMYSQL_HOST=${{ secrets.MYSQL_HOST }} -DMYSQL_PORT=${{ secrets.MYSQL_PORT }} -DDATA_BASE_NAME=${{ secrets.DATA_BASE_NAME }} -DMAIL_USER_NAME=${{ secrets.MAIL_USER_NAME }} -DMAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} ./build/libs/master-0.0.1-SNAPSHOT.jar --spring.config.location=classpath:./,file:./build/resources/main/application-prod.yml -Dspring.profiles.active=prod -Dfile.encoding=UTF-8" >> start.sh
            rm ./build/resources/main/data.sql
            chmod +x start.sh
            ./exec.sh