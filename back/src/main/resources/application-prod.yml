server:
  port: ${PORT}
  ssl:
    certificate: fullchain.pem
    certificate-private-key: privkey.pem
    #key-store: keystore.p12
    #key-store-type: PKCS12
    #key-store-password: ${KEY_STORE_PASSWORD}
    #key-alias: mo2ver
  error:
    include-exception: false      # Response 에 Exception 을 표시할지
    include-message: always       # Response 에 Exception Message 를 표시할지 (never | always | on_param)
    include-stacktrace: on_param  # Response 에 Stack Trace 를 표시할지 (never | always | on_param) on_trace_params 은 deprecated
    whitelabel.enabled: true      # 에러 발생 시 Spring 기본 에러 페이지 노출 여부

spring:
  profiles:
    #default: production
    active: production
  servlet:
    multipart:
      max-file-size: 256MB
      max-request-size: 256MB
      enabled: true
  jackson:
    serialization:
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: true   # 속성이 없는 경우 오류 발생 (true) -> 무시 (false)
  datasource:
    username: ${MYSQL_USER_NAME}
    password: ${MYSQL_PASSWORD}
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${DATA_BASE_NAME}
    driver-class-name: com.mysql.cj.jdbc.Driver
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USER_NAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        hbm2ddl:
          auto: none
          #auto: validate
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
      springframework:
        data:
          mongodb:
            repository:
              query: DEBUG
        security: DEBUG
        web:
          filter: DEBUG
          socket: DEBUG
        messaging: DEBUG

cors-setting:
  url-client: https://mo2ver.vercel.app

jwt-setting:
  jwt-secret: mo2ver-master-jwttoken-startapp!@  # 최소 32개의 문자열 (256bit)
  jwt-accesstoken-validation-second: 60   # 1분 (1 * 60)
  jwt-refreshtoken-validation-second: 3600   # 1시간 (60 * 60)

crypto-setting:
  password: mo2ver_aes256cbc_pbkdf2
  salt: mo2ver_salt

images-setting:
  filepath: images

oracle:
  cloud:
    tenant-id: ocid1.tenancy.oc1..aaaaaaaa7osy4snfj6wc7zm7fab4njjnmifhlz5e5454gp4km7wlnqhtmtaa
    user-id: ocid1.user.oc1..aaaaaaaaxrysvkqe7xqot26li232sotr4ir7fqbnpexnn2o256f2nk6fanna
    fingerprint: cd:37:53:41:4d:cf:f2:5e:a1:da:83:86:0e:b7:14:95
    namespace: cnocuvkcoanz
    bucket-name: bucket-20231206-2356
    private-key: mo2ver_bucket_api_key.pem

# Docs 참고 : https://docs.tosspayments.com/blog/how-to-test-toss-payments
toss-payment:
  url-path: https://api.tosspayments.com/v1
  client-key: test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm # 클라이언트 키, SDK에 사용하세요
  secret-key: test_gsk_docs_OaPz8L5KdmQXkzRz3y47BMw6 # 시크릿 키, API에 사용하세요

slack:
  webhook:
    url: https://hooks.slack.com/services/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

sentry:
  dsn : https://a7a6bf2f4af4e7c3060d387927c9b3d5@o4509848444534784.ingest.us.sentry.io/4509848447418368
  send-default-pii: true     # 사용자 정보 포함
  enable-tracing: false
  environment: production
  issue-base-url: https://sentry.io/organizations/bbj-ni/issues/?query=